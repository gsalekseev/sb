<html>
<head>
<title>Smart Bookmarks</title>
<script>
var ALIASES_KEY = "sb_aliases";

var baseCommands = {
  "b": {
    desc: "Bing Search",
    url: "https://www.bing.com/search/?q=%s",
  },
  "ddg": {
    desc: "DuckDuckGo",
    url: "https://duckduckgo.com/?q=%s",
  },
  "f": {
    desc: "Facebook",
    url: "https://www.facebook.com/%s",
  },
  "gi": {
    desc: "Google Image Search",
    gen: function(q) {
      if (q.match(/^http(s?):.*/)) {
        return {url: ("https://www.google.co.uk/searchbyimage?image_url=" + q)};
      } else {
        return {url: ("https://www.google.com/search?q=" + q + "&tbm=isch")};
      }
    }
  },
  "pp": {
    desc: "Google Photos",
    url: "https://photos.google.com/search/%s",
    urlNoArgs: "https://photos.google.com/"
  },
  "wkt": {
    desc: "Wiktionary",
    url: "https://en.wiktionary.org/wiki/%s"
  },
  "yt": {
    desc: "YouTube search",
    url: "https://www.youtube.com/results?search_query=%s",
    urlNoArgs: "https://www.youtube.com"
  },
  "secs": {
    desc: "Unix timestamp conversion",
    gen: function(q) {
      if (!q) {
        return {text: parseInt(new Date().getTime() / 1000, 10)};
      } else {
        return {text: new Date(parseInt(q, 10) * 1000)}
      }
    }
  },
  "tr": {
    desc: "Google Translate",
    usage: "tr [[from]:[to]] text\nExample: tr ro:fr buna ziua",
    gen: function(q) {
      if (!q) {
        return {text: this.usage};
      }
      var components = q.match(/^(([a-zA-Z\-]*):([a-zA-Z\-]*)\s+)?(.*$)/);
      var from = components[2] || 'auto';
      var to = components[3] || 'en';
      var text = components[4];
      return {url: "https://translate.google.com/#" + from + "/" + to + "/" + text};
    }
  }
};

var coreCommands = {
  "g": {
    desc: "Google Search",
    url: "https://google.com/search?q=%s"
  },
  "list": {
    desc: "List available commands",
    gen: function(_unused) {
      listAll();
      return true;
    }
  },
  "alias": {
     desc: "Add or remove an alias",
     gen: function(q, args) {
       if (args[0] && args[0] != 'alias') {
         aliases = getAliases();
         if (!args[1]) {
           delete aliases[args[0]];
         } else {
           aliases[args[0]] = {
             target: args[1].match(/^[a-zA-Z_\-$]+$/) ? args[1] : undefined,
             url: args[1].match(/^[a-zA-Z_\-$]+$/) ? undefined : args[1],
             urlNoArgs: args[2],
             desc: args[1]
           };
         }
         localStorage.setItem(ALIASES_KEY, JSON.stringify(aliases));
       }
       return {text: "Usage: alias [cmd [cmd|&lt;url [url when no arguments given]&gt;]]\nAliases: " + JSON.stringify(getAliases(), null, "  ")};
     }
  }
};

function getAliases() {
  try {
    return JSON.parse(localStorage.getItem(ALIASES_KEY)) || {};
  } catch (ex) {
    return {};
  }
}

function CommandSetLoader(commandSet, opts) {
  return {
    gen: function(q) {
      var components = q.split(" ");
      var cmd = components[0].toLowerCase();
      var param = q.substring(cmd.length + 1);
      var args = q.substring(components[0].length + 1);

      var r = commandSet[cmd];
      if (r && r.target) {
        return applyLoader(
          r.target + " " + args
        );
      }

      if (!r) {
        return false;
      }

      if ((!args || !r.url) && r.urlNoArgs) {
        return { url: r.urlNoArgs };
      } else if (r.url) {
        return {
          url: r.url.replace("%s", encodeURIComponent(args))
        };
      } else if (r.gen) {
        return r.gen(args, args ? args.split(/\s+/) : []);
      }
      return false;
    },
    list: function() {
      var result = [];
      for (var key in commandSet) {
        result.push({
          cmd: key,
          cmdObject: commandSet[key],
          style: (opts || {}).listStyle,
        });
      }
      return result;
    }
  };
}

function AliasLoader() {
  return CommandSetLoader(getAliases(), {listStyle: "color: red;"});
}

function FallbackLoader(r) {
  return {
    gen: function(q) {
      return {
        url: r.url.replace("%s", encodeURIComponent(q))
      }
    }
  };
}

var loaders = [
  AliasLoader(),
  CommandSetLoader(coreCommands, {listStyle: "color: navy;"}),
  CommandSetLoader(baseCommands),
  FallbackLoader(coreCommands["g"])
];

var loaderCalls = 0;
function applyLoader(text) {
  loaderCalls += 1;
  if (loaderCalls > 10) {
    return {text: "Invalid alias chain"};
  }
  for (var i = 0; i < loaders.length; i++) {
    var r = loaders[i].gen(text);
    if (r) {
      return r;
    }
  }
}

function navigate(url) {
  window.location.assign(url);
  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
    chrome.tabs.update(tabs[0].id, {url: url});
  });
}

function splitArgs(loc){
  var s = loc.search;
  var result = {};
  var pairs = s.split(/[&?]/);
  for (var i = 0; i < pairs.length; i++) {
    if (!pairs[i]) {
      continue;
    }
    var groups = /([^=]*)(=(.*$))?/.exec(pairs[i]);

    result[groups[1]] = decodeURIComponent(groups[3].replace(/\+/g, '%20'));
  }
  return result;
}

function listAll() {
  document.write("<h2>Available commands</h2>");
  document.write("<table>");
  var result = [];
  var seen = {};
  for (var i = 0; i < loaders.length; i++) {
    if (!loaders[i].list) { continue; }
    var l = (loaders[i].list || function(){return [];})();
    for (var j = 0; j < l.length; j++) {
      if (!seen[l[j].cmd]) {
        result.push(l[j]);
        seen[l[j].cmd] = true;
      }
    }
  };
  result.sort(function (a, b) {
    if (a.cmd < b.cmd) {
      return -1;
    } else if (a.cmd > b.cmd) {
      return 1;
    } else {
      return 0;
    }
  });
  for (var i = 0; i < result.length; i++) {
    var styleDesc = result[i].style ? 'style="' + result[i].style + '"' : "";
    document.write("<tr><td "+ styleDesc +">" + result[i].cmd + "&nbsp;</td>");
    var cmdObject = result[i].cmdObject;
    if (cmdObject.target) {
      document.write("<td><i>" + cmdObject.target + "</i></td>");
    } else {
      document.write("<td>" + (cmdObject.desc || "") + "</td>");
    }
    document.write("</tr>\n");
  }
  document.write("</table><br/>");
  document.write("General usage is: <tt>cmd [query]</tt>");
}

var searchQuery = splitArgs(window.location).q;
if (searchQuery) {
  document.title = searchQuery;
  var r = applyLoader(searchQuery);
  if (r) {
    if (r.url) {
      navigate(r.url);
    } else if (r.text) {
      document.write("<pre>" + r.text + "</pre>");
    }
  }
} else {
  document.addEventListener("DOMContentLoaded", function(event) {
    document.getElementById('instructions').style.display = 'block';
  });
}
</script>
<style type="text/css">
  body, tt, input, pre {
    font-family: Monaco, Menlo, monospace;
  }
  tt {
    background-color: #EAEEF7;
    padding: 2px;
    border-radius: 2px;
  }
  #instructions {
    display: none;
  }
  input {
    font-size: 20pt;
    margin-top: 20px;
  }
</style>
</head>
<body>
  <form method="get" id="instructions">
    <div>
      <h1>Smart Bookmarks</h1>
      <p>To install <strong>sb</strong>:</p>
      <ol>
        <li>Right click "Command" field</li>
        <li>Choose "Add As Search Engine..."</li>
        <li>Pick a keyword, for example <strong>sb</strong></li>
      </ol>
      <p>
        Now you can access it by typing <tt>sb &lt;command [query]&gt;</tt> in
        the URL bar. Try <tt>sb list</tt>
      </p>
    </div>
    <input type="text" name="q" placeholder="Command. Try 'list'" autofocus="1">
  </form>
</body>
</html>
